h2
  = @puzzle.difficulty.to_s.camelize

- width, height = @puzzle.picture.metadata.values_at("width", "height")
- aspect_ratio = width.to_f / height.to_f

.text-sm = @puzzle.picture.filename
.text-sm
  span = @puzzle.pieces_count
  span< pcs
  span<> size:
  span = width
  span<> x
  span = height
  span<> aspect ratio:
  span = "%0.2f" % aspect_ratio

- if 1.33 < aspect_ratio
  - display_width = 800
  - display_scale = display_width.to_f / width.to_f
  - display_height = height * display_scale
- else
  - display_height = 600
  - display_scale = display_height.to_f / height.to_f
  - display_width = width * display_scale

.puzzle-show.center
  = image_tag @puzzle.picture.variant(resize_to_fit: [display_width, display_height])
  canvas id=dom_id(@puzzle, :canvas) width=display_width height=display_height

- gen = Random.new @puzzle.id

javascript:
  var canvas = document.getElementById('#{dom_id @puzzle, :canvas}');
  var ctx = canvas.getContext('2d');
  ctx.scale(#{display_scale}, #{display_scale});
  ctx.strokeStyle = "0deg, 0%, 20%)";
  ctx.lineWidth = 3 / #{display_scale};

- @puzzle.pieces.each do |p|
  ruby:
    head, *tail = p.points
    instructions = [
      ['beginPath', ''],
      ['moveTo', head.join(',')],
      *tail.each_slice(3).map { |pts|
        [pts.all? ? 'bezierCurveTo' : 'lineTo', pts.compact.join(',')]
      },
      ['stroke', ''],
      ['fill', '']
    ]

  javascript:
    ctx.fillStyle = "hsla(0deg, 0%, #{gen.rand(20) + 70}%, 0.8)";
    #{raw instructions.map { |m, args| "ctx.#{m}(#{args})" }.join(';') }


h2 Games

.row
  .col.s12.m8
    ul.collection
      - @puzzle.games.order(id: :desc).each do |game|
        = link_to game, class: %w(collection-item waves-effect waves-light) do
          =l game.created_at
          br
          = '.' * (game.commands.count / 10)
